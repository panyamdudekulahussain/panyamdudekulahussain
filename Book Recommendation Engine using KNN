import numpy as np
import pandas as pd
from sklearn.neighbors import NearestNeighbors

# Load the dataset
books = pd.read_csv('BX-Books.csv', sep=';', error_bad_lines=False, encoding="latin-1")
ratings = pd.read_csv('BX-Book-Ratings.csv', sep=';', error_bad_lines=False, encoding="latin-1")

# Clean the data by removing users with less than 200 ratings and books with less than 100 ratings
user_counts = ratings['User-ID'].value_counts()
book_counts = ratings['ISBN'].value_counts()

ratings = ratings[ratings['User-ID'].isin(user_counts[user_counts >= 200].index)]
ratings = ratings[ratings['ISBN'].isin(book_counts[book_counts >= 100].index)]

# Merge the ratings and books datasets
combined = pd.merge(ratings, books, on='ISBN')

# Create a pivot table of user ratings
user_book_matrix = combined.pivot_table(index='User-ID', columns='Book-Title', values='Book-Rating')

# Fill NaN values with 0 (indicating no rating)
user_book_matrix = user_book_matrix.fillna(0)

# Create the KNN model
knn_model = NearestNeighbors(metric='cosine', algorithm='brute')
knn_model.fit(user_book_matrix.values)

# Define the get_recommends function
def get_recommends(book_title):
    # Find the index of the given book title
    book_index = np.where(user_book_matrix.columns == book_title)[0][0]
    
    # Get the distances and indices of the nearest neighbors
    distances, indices = knn_model.kneighbors(user_book_matrix.iloc[:, book_index].values.reshape(1, -1), n_neighbors=6)
    
    # Create a list of recommended books and their distances
    recommended_books = [book_title]
    for i in range(1, len(distances[0])):
        recommended_books.append([user_book_matrix.columns[indices[0][i]], distances[0][i]])
    
    return recommended_books

# Test the function
result = get_recommends("The Queen of the Damned (Vampire Chronicles (Paperback))")
print(result)
